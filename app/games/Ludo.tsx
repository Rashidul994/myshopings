


import React from 'react'

export default function Ludo() {
  return (
    <div>Ludo</div>
  )
}





// 'use client';

// import { useState, useEffect } from 'react';

// const BOARD_SIZE = 15; // 15x15 ‡¶ó‡ßç‡¶∞‡¶ø‡¶°
// const WIN_POSITION = 57; // ‡¶Æ‡ßã‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶™ (‡¶≤‡ßÅ‡¶°‡ßÅ‡¶§‡ßá 57 ‡¶∏‡ßç‡¶ü‡ßá‡¶™ ‡¶Æ‡ßÅ‡¶≠)

// const COLORS = ['red', 'green', 'yellow', 'blue'];

// // ‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶™‡ßá‡¶∏‡¶ø‡¶´‡¶ø‡¶ï ‡¶π‡ßã‡¶Æ ‡¶™‡¶ú‡¶ø‡¶∂‡¶® (‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá 4 ‡¶ï‡¶∞‡ßç‡¶®‡¶æ‡¶∞)
// const HOME_POSITIONS = {
//   red: [0, 0],
//   green: [0, BOARD_SIZE - 1],
//   yellow: [BOARD_SIZE - 1, BOARD_SIZE - 1],
//   blue: [BOARD_SIZE - 1, 0],
// };

// // ‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶™‡¶ú‡¶ø‡¶∂‡¶® (‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá)
// const START_POSITIONS = {
//   red: 0,
//   green: 14,
//   yellow: 28,
//   blue: 42,
// };

// // ‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶Æ‡ßÅ‡¶≠‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶• (‡¶∏‡¶ø‡¶∞‡¶ø‡ßü‡¶æ‡¶∏‡¶≤‡¶ø ‡¶∏‡¶ø‡¶Æ‡ßç‡¶™‡¶≤‡¶æ‡¶á‡¶ú‡¶°)
// const PATH = [
//   [6,0],[7,0],[8,0],[9,0],[10,0],[11,0],[12,0],[13,0],[14,0],
//   [14,1],[14,2],[14,3],[14,4],[14,5],
//   [13,6],[12,6],[11,6],[10,6],[9,6],[8,6],[7,6],[6,6],
//   [6,7],[6,8],[6,9],[6,10],[6,11],[6,12],[6,13],[6,14],
//   [5,14],[4,14],[3,14],[2,14],[1,14],[0,14],
//   [0,13],[0,12],[0,11],[0,10],[0,9],
//   [1,8],[2,8],[3,8],[4,8],[5,8],
//   [5,7],[5,6],[5,5],[5,4],[5,3],[5,2],[5,1],[5,0],
//   [6,0]
// ];

// function getTokenPositionOnBoard(player, step) {
//   // step 0 ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡ßã‡¶Æ‡ßá
//   if (step === 0) return HOME_POSITIONS[player];
//   if (step > WIN_POSITION) return null; // ‡¶ó‡ßá‡¶Æ ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá

//   // step ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶™‡¶æ‡¶• ‡¶•‡ßá‡¶ï‡ßá position ‡¶™‡¶æ‡¶¨‡ßã
//   let posIndex = (START_POSITIONS[player] + step - 1) % PATH.length;
//   return PATH[posIndex];
// }

// export default function LudoGame() {
//   // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶∞ ‡ß™ ‡¶ü‡¶æ ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶™‡¶ú‡¶ø‡¶∂‡¶® (step 0 = home)
//   const [tokens, setTokens] = useState({
//     red: [0, 0, 0, 0],
//     green: [0, 0, 0, 0],
//     yellow: [0, 0, 0, 0],
//     blue: [0, 0, 0, 0],
//   });

//   const [currentPlayer, setCurrentPlayer] = useState('red');
//   const [dice, setDice] = useState(null);
//   const [message, setMessage] = useState('‡¶°‡¶æ‡¶á‡¶∏ ‡¶∞‡ßã‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®');
//   const [diceRolling, setDiceRolling] = useState(false);
//   const [winner, setWinner] = useState(null);

//   // ‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
//   const nextPlayer = {
//     red: 'green',
//     green: 'yellow',
//     yellow: 'blue',
//     blue: 'red',
//   };

//   // ‡¶°‡¶æ‡¶á‡¶∏ ‡¶∞‡ßã‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (6 ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∞‡ßã‡¶≤)
//   const rollDice = () => {
//     if (diceRolling || winner) return;

//     setDiceRolling(true);
//     setMessage('‡¶°‡¶æ‡¶á‡¶∏ ‡¶∞‡ßã‡¶≤ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
//     let rolls = 10;
//     let currentRoll = 0;

//     const rollInterval = setInterval(() => {
//       const val = Math.floor(Math.random() * 6) + 1;
//       setDice(val);
//       currentRoll++;

//       if (currentRoll >= rolls) {
//         clearInterval(rollInterval);
//         setDiceRolling(false);
//         setMessage(`‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ${currentPlayer.toUpperCase()} ‡¶°‡¶æ‡¶á‡¶∏ ‡¶∞‡ßã‡¶≤ ‡¶ï‡¶∞‡¶≤‡ßá‡¶®: ${val}`);
//         handleMove(val);
//       }
//     }, 100);
//   };

//   // ‡¶Æ‡ßÅ‡¶≠ ‡¶≤‡¶ú‡¶ø‡¶ï
//   const handleMove = (diceValue) => {
//     if (winner) return;

//     let playerTokens = tokens[currentPlayer];
//     let movableIndexes = [];

//     // ‡¶ï‡ßã‡¶® ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá?
//     playerTokens.forEach((step, i) => {
//       if (step === 0 && diceValue === 6) {
//         // ‡¶π‡ßã‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá
//         movableIndexes.push(i);
//       } else if (step > 0 && step + diceValue <= WIN_POSITION) {
//         movableIndexes.push(i);
//       }
//     });

//     if (movableIndexes.length === 0) {
//       setMessage(`‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ${currentPlayer.toUpperCase()} ‡¶è‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ`);
//       if (diceValue !== 6) {
//         setCurrentPlayer(nextPlayer[currentPlayer]);
//       } else {
//         setMessage(prev => prev + ' ‚Äî ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ñ‡ßá‡¶≤‡ßÅ‡¶®!');
//       }
//       return;
//     }

//     setMessage(`‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ${currentPlayer.toUpperCase()}, ‡¶ï‡ßã‡¶® ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?`);

//     // ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Æ‡ßÅ‡¶≠‡ßá‡¶¨‡¶≤ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶®‡ßã (‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‚Äå‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã)
//     moveToken(movableIndexes[0], diceValue);
//   };

//   // ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶®‡ßã
//   const moveToken = (tokenIndex, diceValue) => {
//     setTokens(prev => {
//       let playerTokens = [...prev[currentPlayer]];
//       let currentStep = playerTokens[tokenIndex];

//       if (currentStep === 0 && diceValue === 6) {
//         playerTokens[tokenIndex] = 1; // ‡¶π‡ßã‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞ ‡¶π‡¶≤
//       } else {
//         playerTokens[tokenIndex] = currentStep + diceValue;
//       }

//       // ‡¶ö‡ßá‡¶ï ‡¶ú‡ßá‡¶§‡¶æ ‡¶ï‡¶ø?
//       if (playerTokens[tokenIndex] === WIN_POSITION) {
//         setWinner(currentPlayer);
//         setMessage(`üéâ ‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ${currentPlayer.toUpperCase()} ‡¶ú‡¶ø‡¶§‡ßá‡¶õ‡ßá‡¶®! üéâ`);
//       }

//       return {
//         ...prev,
//         [currentPlayer]: playerTokens,
//       };
//     });

//     // ‡¶Ø‡¶¶‡¶ø ‡¶°‡¶æ‡¶á‡¶∏ 6 ‡¶®‡¶æ ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶¨‡¶¶‡¶≤‡¶æ‡¶ì
//     if (diceValue !== 6) {
//       setCurrentPlayer(nextPlayer[currentPlayer]);
//     } else {
//       setMessage(prev => prev + ' ‚Äî ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ñ‡ßá‡¶≤‡ßÅ‡¶®!');
//     }
//   };

//   // ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶ó‡ßç‡¶∞‡¶ø‡¶° ‡¶§‡ßà‡¶∞‡ßÄ
//   const renderBoard = () => {
//     let grid = [];
//     for (let row = 0; row < BOARD_SIZE; row++) {
//       for (let col = 0; col < BOARD_SIZE; col++) {
//         // ‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨
//         let tokenHere = null;
//         Object.entries(tokens).forEach(([player, tokenArr]) => {
//           tokenArr.forEach((step, idx) => {
//             const [x, y] = getTokenPositionOnBoard(player, step) || [-1, -1];
//             if (x === row && y === col) {
//               tokenHere = { player, idx };
//             }
//           });
//         });

//         // ‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶∏‡ßá‡¶≤ ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤
//         let bgColor = '#eee';
//         if (
//           (row === 0 && col === 0) ||
//           (row === 0 && col === BOARD_SIZE - 1) ||
//           (row === BOARD_SIZE - 1 && col === 0) ||
//           (row === BOARD_SIZE - 1 && col === BOARD_SIZE - 1)
//         ) {
//           bgColor = '#ccc';
//         } else if (
//           (row >= 6 && row <= 8 && col >= 0 && col <= 14) ||
//           (col >= 6 && col <= 8 && row >= 0 && row <= 14)
//         ) {
//           bgColor = '#f8f8f8';
//         }

//         grid.push(
//           <div
//             key={`${row}-${col}`}
//             style={{
//               width: 30,
//               height: 30,
//               border: '1px solid #aaa',
//               backgroundColor: bgColor,
//               position: 'relative',
//               boxSizing: 'border-box',
//             }}
//           >
//             {/* ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã */}
//             {tokenHere && (
//               <div
//                 style={{
//                   width: 22,
//                   height: 22,
//                   borderRadius: '50%',
//                   backgroundColor: COLORS.indexOf(tokenHere.player) !== -1 ? COLORS[COLORS.indexOf(tokenHere.player)] : 'gray',
//                   border: '2px solid #444',
//                   position: 'absolute',
//                   top: '50%',
//                   left: '50%',
//                   transform: 'translate(-50%, -50%)',
//                 }}
//                 title={`${tokenHere.player.toUpperCase()} ‡¶ü‡ßã‡¶ï‡ßá‡¶® #${tokenHere.idx + 1}`}
//               ></div>
//             )}
//           </div>
//         );
//       }
//     }
//     return grid;
//   };

//   return (
//     <div style={{ padding: 20, fontFamily: 'Arial, sans-serif', maxWidth: 550, margin: 'auto' }}>
//       <h1 style={{ textAlign: 'center', marginBottom: 10 }}>üé≤ ‡¶≤‡ßÅ‡¶°‡ßÅ ‡¶ó‡ßá‡¶Æ üé≤</h1>

//       <div
//         style={{
//           display: 'grid',
//           gridTemplateColumns: `repeat(${BOARD_SIZE}, 30px)`,
//           gridTemplateRows: `repeat(${BOARD_SIZE}, 30px)`,
//           marginBottom: 20,
//           userSelect: 'none',
//           border: '2px solid #333',
//         }}
//       >
//         {renderBoard()}
//       </div>

//       <div style={{ textAlign: 'center', marginBottom: 10 }}>
//         <button
//           onClick={rollDice}
//           disabled={diceRolling || winner !== null}
//           style={{
//             padding: '10px 20px',
//             fontSize: 18,
//             cursor: diceRolling || winner !== null ? 'not-allowed' : 'pointer',
//           }}
//         >
//           {diceRolling ? '‡¶∞‡ßã‡¶≤ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...' : '‡¶°‡¶æ‡¶á‡¶∏ ‡¶∞‡ßã‡¶≤ ‡¶ï‡¶∞‡ßã'}
//         </button>
//       </div>

//       <div style={{ textAlign: 'center', marginBottom: 10 }}>
//         <p>‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞: <b style={{ color: currentPlayer }}>{currentPlayer.toUpperCase()}</b></p>
//         <p>‡¶°‡¶æ‡¶á‡¶∏ ‡¶∞‡ßã‡¶≤: {dice || '-'}</p>
//         <p>{message}</p>
//         {winner && <p style={{ fontSize: 22, color: 'green' }}>üéâ ‡¶™‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ {winner.toUpperCase()} ‡¶ú‡ßü‡ßÄ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! üéâ</p>}
//       </div>
//     </div>
//   );
// }

